import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 18기
*/
/*:
## 첫번째 테스트 (2주차)
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)


/**==================================================================
 [1번 문제]
  - 하나의 앱이 실행되면, 메모리는 어떤 4가지 영역으로 나누어 지나요? 4가지 영역의 이름을 쓰세요.
 ===================================================================**/

// 데이터 영역, 코드 영역, 스택 영역, 힙 영역




/**==================================================================
 [2번 문제]
  - 프로그래밍에서, 표현식(Expression)이 어떤 의미인가요? 아는대로 작성하세요.
 ===================================================================**/


// 값을 반환하는 식 또는 코드
// 변수에 값을 할당하는 표현과 어떤 의미에서 평가하여 값으로 해석되는 표현식이 있다.




/**==================================================================
 [3번 문제]
  -  반복문을 사용해서, 1부터 10까지 값을 더한 결과값을 출력하는 코드를 작성해 보세요.
    (힌트: 변수를 하나 만들고, 해당 변수를 이용 어떤 반복문을 어떻게 사용할지 고민해 보세요.)
 ===================================================================**/


var result = 0
for i in 1...10 {
    result += i
}
print(result)





/**==================================================================
 [4번 문제]
  -  튜플이 뭔가요? 간단한 개념을 1-2줄로 서술 하고, 간단한 코드 예시를 하나 만들어 보세요.
 ===================================================================**/

// 다양한 값(데이터)들의 묶음

var appleHistory: (founder1: String, founder2: String, year: Int) = ("Jobs", "Wozniak", 1977)
print("Apple은 \(appleHistory.founder1), \(appleHistory.founder2)에 의해 \(appleHistory.year)년 법인을 상장 하게 된다.")





/**==================================================================
 [5번 문제]
  -  구구단을 2단부터, 9단까지 출력하는 코드를 반복문을 사용해서 만들어 보세요.
    (힌트: 어떤게 반복이 되어야 할까요? 구구단에서 반복이 되는 부분이 어디죠?)
 ===================================================================**/


for i in 2...9 {
    for j in 1...9 {
        print("\(i) * \(j) = \(j * i)")
    }
}










/**==================================================================
 [6번 문제]
  - 함수만들어 보기: 여러개의 정해지지 않은 갯수의 정수를 받아서, 평균을 구하는 함수를 작성해 보세요.
    (힌트: 함수의 이름은 누구봐도 알아볼 수 있게, 평균..이란 말이 들어가면 좋겠네요!)
 ===================================================================**/



func avg(_ numbers:[Int]) -> Double {
    var result: Double = 0.0
    for i in 0...(numbers.count - 1) {
        result += Double(numbers[i]) / Double(numbers.count)
    }
    return result
}








/**==================================================================
 [7번 문제]
 - 함수만들어 보기: 2개의 정수를 입력 받아, 그 숫자들을 더한 결과값을 문자열로 반환하는
   함수를 작성해 보세요.
   (힌트: 문자열로 반환하려면, 함수 안에서 변환의 과정이 한번 필요하겠네요.)
 ===================================================================**/


func solution(_ num1: Int, _ num2: Int) -> String {
    return String(num1 + num2)
}








/**==================================================================
 [8번 문제]
  - 함수의 파라미터에서 사용하는 inout키워드에 대해서, 간단하게 설명해 보세요.
 ===================================================================**/



// Swift에서 함수의 파라미터는 상수이므로 함수 내부에서 파라미터의 값을 변경할 수 없다.
// 만약 함수에서 파라미터의 값을 변경하고, 변경된 값이 함수 호출이 종료된 후에도 지속되길 원한다면 inout 파라미터를 사용하면 된다.
// 메모리 접근에 주의!



/**==================================================================
 [9번 문제]
  -  다음의 제어전송문 4가지를 각각 쓰이는 경우와 어떻게 사용되는지 간단하게 설명하세요.
    (break / fallthrough / continue / return)
    (힌트1: break는 2가지 경우에 쓰입니다.)
    (힌트2: return은 리턴타입이 있는 함수/리턴타입이 없는 함수 구분해서, 설명해 주세요.)
 ===================================================================**/

// 1.break문
// 해당 case에서 실행하는 문장이 없는 경우에 주로 사용, 전체 제어문의 실행을 바로 중지 시킨다.


// 2.fallthrough문
// 매칭된 값과 상관없이 무조건 다음 문장도 실행한다.


// 3.continue문
// 현재 loop를 중지하고 다음 loop를 수행한다.


// 4.return문
// 리턴타입이 있는 경우 해당 타입을 리턴하면서 함수를 벗아난다.(스택의 메모리에서 내려감)
// 리턴타입이 없는 경우 함수의 실행을 중지하고 벗어나게 된다.




/**==================================================================
 [10번 문제]
  - nil이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// c언어에서의 NULL은 포인터가 가리키는 객체가 존재하지 않는다는 것과는 달리 Swift에서 nil은 포인터가 아니라 특정 타입에 대한 값이 없음을 보여준다.





/**==================================================================
 [11번 문제]
  - Optional 타입에는 .none이 있는데, 이것과 nil의 공통점 또는 차이점은?
 ===================================================================**/

// Optional 타입은 Enum으로 만들어져있고, .none 케이스는 값이 nil일 때와 같다.
// 그냥 둘다 완전히 동일하다.




/**==================================================================
 [12번 문제]
  - Optional을 언래핑(Unrapping) 하는 4가지 방법은? 간단하게 서술로 쓰시면 됩니다.
 ===================================================================**/

// 1번 방법
// if문 Unwrapping


// 2번 방법
// switch문 Unwrapping


// 3번 방법
// 강제 Unwrapping


// 4번 방법
// nil coalescing




/**==================================================================
 [13번 문제]
  - 열거형(Enum)은 어떤 경우에 사용하는 타입인가요? 아는대로 간단하게 서술해 보세요.
 ===================================================================**/

// 공통된 주제에 대해 이미 정해놓은 입력 값만 선택해서 받고 싶을 때 사용






/**==================================================================
 [14번 문제]
 구글(google), 페이스북(facebook), 네이버(naver) 로그인을 위해 SiteLogin라는 이름을 가진
 아래의 Enum 타입을 완성해 보세요.
 
 각 case는 사용자의 아이디(String)와 비밀번호(String)를 위한 연관 값(associated value)을  가집니다.
 
 (만들고자 하는 타입 예시)
 enum SiteLogin { }
 
 (변수에 담았을때의 모습)
 var login1 = SiteLogin.google("google@gmail.com", "0000")
 
  (힌트: 연관값이라는 개념을 어떻게 사용해야 하죠?)
 ===================================================================**/

// 아래의 enum타입 완성

enum SiteLogin {
    case google(String, String)
    case facebook(String, String)
    case naver(String, String)
}
var login1 = SiteLogin.google("google@gmail.com", "0000")
var login2 = SiteLogin.facebook("facebook@facemail.com", "1234")
var login3 = SiteLogin.naver("naver@naver.com", "4321")


//var login1 = SiteLogin.google("google@gmail.com", "0000")








/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
